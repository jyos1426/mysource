<!DOCTYPE html>
<html>

<head>
    <%- include('../partials/head') -%>
</head>
<style>
    #timeline_log.box-body{
        overflow-y:hidden;
    }
    #timeline_log.box-body:hover{
        overflow-y:auto;
    }
</style>
<body class="hold-transition skin-wins sidebar-mini fixed">
    <div class="wrapper">
        <%- include('../partials/main-header') -%>
            <%- include('../partials/main-sidebar') -%>
                <!-- Content Wrapper. Contains page content -->
                <div class="content-wrapper bg_w">
                    <section class="content-header content_border animated fadeInLeft">
                            <h4>
                                대시보드
                                <%# <small>Control panel</small> %>
                            </h4>
                            <ol class="breadcrumb">
                                <li><a href="/"><i class="fa fa-home"></i> 홈</a></li>
                                <li class="active">대시보드</li>
                            </ol>
                    </section>

                    <section class="content">

                        <!-- Small boxes (Stat box) -->
                        <div class="row">
                            <div class="col-lg-3 col-xs-6">
                                <!-- small box -->
                                <div class="small-box bg-aqua animated fadeIn">
                                    <div id="detect-box" class="inner">
                                        <h3><sup style="font-size: 20px">확인중</sup></h3>
                                        <p>탐지 검증</p>
                                    </div>
                                    <div class="icon">
                                        <i class="ion ion-ios-folder"></i>
                                    </div>
                                    <a href="javascript:void(0);" onclick="callModal(this);" value="detect" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
                                </div>
                            </div>
                            <!-- ./col -->

                            <div class="col-lg-3 col-xs-6">
                                <!-- small box -->
                                <div class="small-box bg-green animated fadeIn">
                                        <div id="load-box" class="inner">
                                            <h3><sup style="font-size: 20px">확인중</sup></h3>
                                            <p>부하 검증</p>
                                        </div>
                                    <div class="icon">
                                        <i class="ion ion-stats-bars"></i>
                                    </div>
                                    <a href="javascript:void(0);" onclick="callModal(this);" value="load" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
                                </div>
                            </div>
                            <!-- ./col -->

                            <div class="col-lg-3 col-xs-6">
                                <!-- small box -->
                                <div class="small-box bg-yellow animated fadeIn">
                                    <div id="pcap-box" class="inner">
                                        <h3><sup style="font-size: 20px">확인중</sup></h3>
                                        <p>Pcap 관리</p>
                                    </div>
                                    <div class="icon">
                                        <i class="ion ion-soup-can"></i>
                                    </div>
                                    <a href="javascript:void(0);"  value="pcap" onclick="callModal(this);" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
                                </div>
                            </div>
                            <!-- ./col -->

                            <div class="col-lg-3 col-xs-6">
                                <!-- small box -->
                                <div class="small-box bg-red animated fadeIn">
                                    <div id="ivs-info-box" class="inner">
                                        <h3><sup style="font-size: 20px">확인중</sup></h3>
                                        <p>CPU</p>
                                    </div>
                                    <div class="icon">
                                        <i class="ion ion-ios-monitor"></i>
                                    </div>
                                    <a href="#" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
                                </div>
                            </div>
                            <!-- ./col -->
                        </div>
                        <!-- /.row -->

                        <!-- Main row -->
                        <div class="row">
                            <!-- Left col -->
                            <section class="col-lg-7 connectedSortable">
                                <!--  box (검증센서연결 form)-->
                                <div class="box box-success animated fadeIn">
                                    <div class="box-header">
                                        <i class="fa fa-server"></i>
                                        <h3 class="box-title">검증 센서</h3>
                                    </div>
                                    <div class="box-body tab-pane" id="divSettings">
                                        <form class="form-horizontal" id="frmSensorConnect">
                                            <div class="form-group">
                                                <label for="ip" class="col-sm-2 control-label">IP Address</label>
                                                <div class="col-sm-10">
                                                    <input type="text" class="form-control input-dut-info" name="ip" placeholder="x.x.x.x" value="">
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label for="port" class="col-sm-2 control-label">Port</label>
                                                <div class="col-sm-10">
                                                    <input type="text" class="form-control input-dut-info" name="port" placeholder="port" value="">
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label for="console_id" class="col-sm-2 control-label">ID</label>
                                                <div class="col-sm-10">
                                                    <input type="text" class="form-control input-dut-info" name="console_id" placeholder="Management ID" value="">
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label for="console_passwd" class="col-sm-2 control-label">Password</label>
                                                <div class="col-sm-10">
                                                    <input type="password" class="form-control input-dut-info" name="console_passwd" placeholder="Management Password" value="">
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label for="device_id" class="col-sm-2 control-label">SSH ID</label>
                                                <div class="col-sm-10">
                                                    <input type="text" class="form-control input-dut-info" name="device_id" placeholder="SSH ID" value="" />
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label for="device_port" class="col-sm-2 control-label">SSH Port</label>
                                                <div class="col-sm-10">
                                                    <input type="port" class="form-control input-dut-info" name="device_port" placeholder="SSH Password" value="">
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label for="device_passwd" class="col-sm-2 control-label">SSH Password</label>
                                                <div class="col-sm-10">
                                                    <input type="password" class="form-control input-dut-info" name="device_passwd" placeholder="SSH Password" value="">
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-sm-12">
                                                    <button type="button" value="btnDUTList" onclick="callModal(this);" class="col-sm-2 btn btn-default pull-left">연결 센서 목록 </i></button>
                                                    <button type="button" name="btnSensorConnect" class="col-sm-2 btn btn-primary pull-right"><i class="fa fa-none"> 연결</i></button>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                    <div class="overlay" id="overlay">
                                        <i class="fa fa-spinner fa-spin"></i>
                                    </div>
                                </div>
                                <!-- /.box (검증센서연결 form) -->

                                <!-- box (최근 작업 log) -->
                                <div class="box box-primary animated fadeIn">
                                    <div class="box-header">
                                        <i class="ion ion-clipboard"></i>
                                        <h3 class="box-title">최근 작업</h3>
                                        <!-- tools box -->
                                        <div class="pull-right box-tools">
                                            <buttom type="button" class="btn btn-box-tool" id="btnReloadAudit" title="새로고침">
                                                <i class="fa fa-refresh"></i>
                                            </buttom>
                                        </div>
                                        <!-- /. tools -->
                                    </div>
                                    <!-- /.box-header -->
                                    <div id="timeline_log" class="box-body" style="height:475px;">
                                        <ul class="timeline k-timeline" style="margin-top:5px;"></ul>
                                    </div>
                                    <!-- /.box-body -->
                                </div>
                                <!-- /.box(최근 작업) -->
                            </section>
                            <!-- /.Left col -->

                            <!-- right col -->
                            <section class="col-lg-5 connectedSortable">
                                <!-- box (정책 검증센서 시스템 정보)  -->
                                <div class="box box-solid bg-teal-gradient  animated fadeIn">
                                    <div class="box-header">
                                        <i class="fa fa-th"></i>
                                        <h3 class="box-title">검증 센서 시스템 정보</h3>
                                        <div class="box-tools pull-right">
                                            <button type="button" class="btn bg-teal btn-sm" name="btnSensorInfoRefresh"><i class="fa fa-refresh"></i></button>
                                            <button type="button" class="btn bg-teal btn-sm" name="btnIntervalControl"><i id="iconIntervalControl" class="fa fa-stop"></i></button>
                                        </div>
                                    </div>
                                    <!-- /.box-header -->
                                    <div class="box-body content" style="min-height:200px" id="divSensorConnectResult">
                                        검증센서 연결이 필요합니다.
                                    </div>
                                    <!-- /.box-body -->
                                </div>
                                <!--/.box (정책 검증센서 시스템 정보)  -->

                                <!-- IVS System Info box -->
                                <div class="box box-solid bg-light-blue-gradient animated fadeIn">
                                    <div class="box-header">
                                        <div class="pull-right box-tools">
                                          <button type="button" class="btn btn-primary btn-sm" name="btnIVSInfoRefresh"><i class="fa fa-refresh"></i></button>
                                          <button type="button" class="btn btn-primary btn-sm" name="btnIVSIntervalControl"><i id="IVSIntervalControl" class="fa fa-stop"></i></button>
                                        </div>
                                        <i class="fa fa-map-marker"></i>
                                        <h3 class="box-title">
                                            IVS 시스템 정보
                                        </h3>
                                    </div>
                                    <!-- /. box-header -->
                                    <div class="box-body content" style="height: 250px; width: 100%;" id="ivsSystemInfo">
                                        IVS시스템 정보가 존재하지 않습니다.
                                    </div>
                                    <!-- /.box-body-->
                                </div>
                                <!-- IVS System Info/.box -->

                            </section>
                            <!-- right col -->
                        </div>
                        <!-- /.row (main row) -->
                    </section>
                </div>
                <!-- /.content-wrapper -->
    </div>
    <!-- ./wrapper -->
    <%- include('../partials/modal-dash-detect') -%>
    <%- include('../partials/modal-dash-load') -%>
    <%- include('../partials/modal-dash-pcap') -%>
    <%- include('../partials/modal-detect') -%>
    <%- include('../partials/modal-dut-list') -%>
    <%- include('../partials/foot') -%>

    <script>
        var $btnSensorConnect = $('button[name=btnSensorConnect]');
        var isSensorIntarval = true;
        var isIVSInterval = true;

        var sensorData = {
            ip: '',
            port: '',
            dataAll: {},    //network, basic
            version: '',
            license: '',
        }

        $(function () {

            // Dash보드 접근 시 병렬수행
            //
            // 1) getDUTList : 최근 연결 센서들 가져옥
            // 2) ivsTestingCheck : 현재 테스트 중인지 Check 하기 : test중이 아니면 ) ivsDetectList();
            // 3) GetRemoteAuditLog : 감사로그 가져오기

            getDUTList();
            ivsTestingCheck();
            ivsGetPcapList();

            setTimeout(function () {
                GetRemoteAuditLog();

                if ('<%=session.isConnected%>' == 'true') {
                    getSensorInfo();
                } else {
                    $('#overlay').hide();
                }
            }, 500);

            getIVSInfo();

            var sensorInterval = setInterval(function () {
                if ($btnSensorConnect.hasClass('btn-success')) {
                    getSensorInfo(1);
                }
            }, 60000);

            $('button[name=btnIntervalControl]').click(function () {
                if (isIVSIntarval) {
                    clearTimeout(sensorInterval);
                    isSensorIntarval = false;
                    $('#iconIntervalControl').removeClass('fa-stop');
                    $('#iconIntervalControl').addClass('fa-play');

                } else {
                    isSensorIntarval = true;
                    $('#iconIntervalControl').removeClass('fa-play');
                    $('#iconIntervalControl').addClass('fa-stop');
                    sensorInterval = setInterval(function () {
                        if ($btnSensorConnect.hasClass('btn-success')) {
                            getSensorInfo(1);
                        }
                    }, 60000);
                }
            });

            $('button[name=btnSensorInfoRefresh]').click(function () {
                if ($btnSensorConnect.hasClass('btn-success')) {
                    getSensorInfo();
                }
            });

            var ivsInterval = setInterval(function () {
                getIVSInfo();
            }, 60000);

            $('button[name=btnIVSIntervalControl]').click(function () {
                if (isIVSInterval) {
                    clearTimeout(ivsInterval);
                    isIVSInterval = false;
                    $('#IVSIntervalControl').removeClass('fa-stop');
                    $('#IVSIntervalControl').addClass('fa-play');

                } else {
                    isIVSInterval = true;
                    $('#IVSIntervalControl').removeClass('fa-play');
                    $('#IVSIntervalControl').addClass('fa-stop');
                    ivsInterval = setInterval(function () {
                        getIVSInfo();
                    }, 60000);
                }
            });

            $('button[name=btnIVSInfoRefresh]').click(function () {
                getIVSInfo();
            });

        });

        /*
            * 검증센서 Conponents' events
            */
        $btnSensorConnect.on('click', function () {
            if ($btnSensorConnect.hasClass('btn-success')) {
                //연결 해제
                swal({
                    title: "연결을 해제하시겠습니까?",
                    text: $('input[name=ip]').val() + " 센서와의 연결을 해제합니다.",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes"
                }).then(function () {
                    setFailView();
                    updateDUTstatusFalse();
                    ivsDUTunset();
                    $btnSensorConnect.removeClass('btn-danger');
                    $btnSensorConnect.addClass('btn-primary');
                }).catch(swal.noop);

            } else {
                //연결시도
                formDisable(true);
                $btnSensorConnect.removeClass('btn-primary');
                $btnSensorConnect.removeClass('btn-danger');
                $btnSensorConnect.addClass('btn-default');

                $('#header_connect_status').removeClass('label-success');
                $('#header_connect_status').removeClass('label-danger');
                $('#header_connect_status').addClass('label-default');
                $('#header_connect_status').html('<i class="fa fa-none">연결중</i>');
                updateDUTlatest();
                getSensorInfo();
            }
        });


        /*
            * 최근 작업 Log Conponents' events
            */
        $('#btnReloadAudit').click(GetRemoteAuditLog);

        function ivsTestingCheck() {
            $.ajax({
                url: '/api/dashboards/dashboard/ivs_testing_check',
                method: 'get',
                dataType: 'json',
                success: function (json) {
                    if(json.length > 0){
                        var status = json[0].datas[0].test_status;

                        if (status == 'TEST_RUN') {
                            testingData.ip = json[1].datas[0].dut_ip;
                            testingData.port = json[1].datas[0].dut_port;
                            testingData.category = json[2].datas[0].category;
                            testingData.type = json[2].datas[0].type;
                            testingData.interval = json[2].datas[0].interval;
                            testingData.testcode = json[3].datas[0].test_code;
                            testingData.dbpath = json[3].datas[0].rule_path + '/' + json[3].datas[0].rule_name;

                            if(json[2].datas[0].test == '1'){
                                $('#detect-box').html('<h3>Testing</h3>' +
                                    '<p>탐지검증 테스트가 진행중입니다.</p>');
                                ivsGetLoadList();
                            }else if(json[2].datas[0].test == '2'){
                                $('#load-box').html('<h3>Testing</h3>' +
                                    '<p>부하검증 테스트가 진행중입니다.</p>');
                                ivsGetDetectList();
                            }
                        }else{
                            ivsGetDetectList();
                            ivsGetLoadList();
                            // 추후 둘중 하나만 테스트 중일 시 병렬적을 처리되어야하기때문에 따로 가져오도록 처리
                        }
                    }
                },
                error: function (request, status, error) {
                    handleError(null,null,null,'\n현재 진행 중인 테스트를 확인하는데 에러가 발생했습니다.');
                }
            });
        }

        //****************************** Connect Start ******************************//
        //*********
        //*********
        //********* 0) update DUT latest
        function updateDUTlatest() {
            sensorData.ip = $('input[name=ip]').val();
            var data = {
                ip: sensorData.ip
            };
            $.ajax({
                url: '/api/dashboards/dashboard/update_dut_latest',
                method: 'get',
                data: data,
                timeout: 5000,
                dataType: 'json',
                success: function (json) {
                },
                error: function (request, status, error) {
                    handleError(null,null,null,'\n최근 연결 센서리스트를 가져오는데 에러가 발생했습니다.');
                }
            });
        }
        //*********
        //********* 1 / 2) Sensor 시스템/ 네트워크 정보 가져오기

        function getSensorInfo(is_interval) {
            sensorData.ip = $('input[name=ip]').val();
            sensorData.port = $('input[name=port]').val();
            var data = {
                ip: sensorData.ip,
                port: sensorData.port,
                is_interval: is_interval
            };

            $.ajax({
                url: '/api/dashboards/dashboard/get_sensor_info',
                method: 'get',
                data: data,
                timeout: 5000,
                dataType: 'json',
                success: function (json) {
                    if( json != null ){
                        sensorData.dataAll = json;
                        if (is_interval != 1) {
                            connectWithSensor();
                        }else{
                            setSuccessView();
                        }
                    }else{
                        handleError(null,null,null,'센서의 시스템 정보를 가져오는 중 에러가 발생했습니다.');
                    }
                },
                error: function (request, status, error) {
                    handleError(request,status,error,'센서의 시스템 정보를 가져오는 중 에러가 발생했습니다.');
                }
            });
        }

        // 센서버전-라이센스-setting DUT까지
        function connectWithSensor(){
            var data = {
                ip: sensorData.ip,
                port: sensorData.port,
                console_id: $('input[name=console_id]').val(),
                console_passwd: $('input[name=console_passwd]').val(),
                device_id: $('input[name=device_id]').val(),
                device_port: $('input[name=device_port]').val(),
                device_passwd: $('input[name=device_passwd]').val(),
            }

            $.ajax({
                url: '/api/dashboards/dashboard/connect_with_sensor',
                method: 'get',
                data: data,
                dataType: 'json',
                success: function (json) {
                    sensorData.version = json.version;
                    sensorData.path = json.path;
                    sensorData.license = json.license;
                    if(json.dut_setting_result.includes('SUCCESS')){
                        setSuccessView();
                    }else{
                        handleError(request,status,error,'센서와 연결 중 에러가 발생했습니다.');
                    }
                },
                error: function (request, status, error) {
                    handleError(request,status,error,'센서와 연결 중 에러가 발생했습니다.');
                }
            });
        }
        //*********
        //****************************** Connect End ******************************//
        //********* 1 / 2) IVS 정보 가져오기

        function getIVSInfo() {
            $.ajax({
                url: '/api/dashboards/dashboard/get_ivs_info',
                method: 'get',
                timeout: 5000,
                dataType: 'json',
                success: function (data) {
                    if( data != null && data != ''){
                        var result = JSON.parse(data);
                        var ivsInfo = result['process_usage']['ivs'];
                        var cpu_usage = ivsInfo['cpu_usage']['percent'];
                        var disk_read = ivsInfo['disk_usage']['read_bytes'];
                        var disk_write = ivsInfo['disk_usage']['write_bytes'];
                        var mem_usage = ivsInfo['mem_usage']['percent'];
                        var htmlStr = '<div>' +
                                      '   <span class="info-box-number">CPU 사용률</span>' +
                                      '   <span class="info-box-text">' + cpu_usage + '% </span>' +
                                      '   <div class="progress progress xs active">' +
                                      '       <div class="progress-bar progress-bar-warning progress-bar-striped" style="width:' + cpu_usage + '%"></div>' +
                                      '   </div>' +
                                      '</div>' +
                                      '<div>' +
                                      '   <span class="info-box-number">MEMORY 사용률</span>' +
                                      '   <span class="info-box-text">' + mem_usage + '% </span>' +
                                      '   <div class="progress progress xs active">' +
                                      '       <div class="progress-bar progress-bar-danger progress-bar-striped" style="width:' + mem_usage + '%"></div>' +
                                      '   </div>' +
                                      '</div>' +
                                      '<div>' +
                                      '   <span class="info-box-number">DISK I/O</span>' +
                                      '   <span class="info-box-text">Read: ' + Math.round( disk_read / 1000 ) + ' KB </span>' +
                                      '   <span class="info-box-text">Write: ' +  Math.round( disk_write / 1000 )+ ' KB </span>' +
                                      '</div>';
                        $('#ivsSystemInfo').html(htmlStr);                        
                        $('#ivs-info-box').html('\
                        <h3>'+ cpu_usage +'<sup style="font-size: 20px">%</sup></h3>\
                        <p>CPU 사용률</p>\
                            ');   

                    }else if(data == ''){
                        $('#ivsSystemInfo').html('IVS시스템 정보가 존재하지 않습니다.');
                    }
                    else{
                        handleError(null,null,null,'IVS시스템 정보를 가져오는 중 에러가 발생했습니다.');
                    }
                },
                error: function (request, status, error) {
                    handleError(request,status,error,'IVS시스템 정보를 가져오는 중 에러가 발생했습니다.');
                }
            });
        }
        //*********

        function setSuccessView() {
            var dataAll = sensorData.dataAll;

            formDisable(true);

            $btnSensorConnect.prop('disabled', false);
            $btnSensorConnect.removeClass('btn-default');
            $btnSensorConnect.addClass('btn-success');

            var cpu_tot = dataAll.cpu_tot;
            var mem_used = dataAll.mem_used;
            var mem_total = dataAll.mem_total;
            var d_bps_0 = dataAll.d_bps;

            $("a[name=aToDownload]").attr('hidden', false);

            $('#header_connect_status').removeClass('label-default');
            $('#header_connect_status').removeClass('label-danger');
            $('#header_connect_status').addClass('label-success');
            $('#header_connect_status').html('<i class="fa fa-none">연결성공</i>');
            var url = 'https://' + sensorData.ip + ':' + sensorData.port + '/activex/login/SniperInstaller.exe';
            $('#divSensorConnectResult').html(
                // '<a href=#none onclick=this.nextSibling.style.display=(this.nextSibling.style.display==\'none\')?\'block\':\'none\';>' +
                // '센서 정보 보기' +
                // '</a>'+
                '<div>' +
                '   <span class="info-box-number">CPU</span>' +
                '   <span class="info-box-text">' + cpu_tot + '% </span>' +
                '   <div class="progress progress xs active">' +
                '       <div class="progress-bar progress-bar-warning progress-bar-striped" style="width:' + cpu_tot + '%"></div>' +
                '   </div>' +
                '</div>' +
                '<div>' +
                '   <span class="info-box-number">MEMORY</span>' +
                '   <span class="info-box-text">' + byteConvertor(mem_used) + ' / ' +
                        byteConvertor(mem_total) +
                '       (' + Math.round(mem_used / mem_total * 10000) / 100 + '%) </span>' +
                '   <div class="progress progress xs active">' +
                '       <div class="progress-bar progress-bar-danger progress-bar-striped" style="width:' +
                             Math.round(mem_used / mem_total * 10000) / 100 + '%">' +
                        '</div>' +
                '   </div>' +
                '</div>' +
                '<div>' +
                '   <span class="info-box-number">NETWORK</span>' +
                '   <span class="info-box-text">' + d_bps_0 + '% </span>' +
                '   <div class="progress progress xs active">' +
                '       <div class="progress-bar progress-bar-aqua progress-bar-striped" style="width:' + d_bps_0 + '%">' +
                '       </div>' +
                '   </div>' +
                '</div>'+
                '<div style="margin-top: 10px;">'+ // style=\'display:none\'>' +
                '   <span class="label label-primary margin-right" style="font-size:11px;"><i class="fa fa-none">버전</i> : ' + sensorData.version + '</span>'+
                '   <span class="label label-primary" style="font-size:11px;"><i class="fa fa-none">설치 경로</i> : ' + sensorData.path + '</span>'+
                '   <a href="'+url+'" name="aToDownload" class="small-box-footer pull-right" style="color:white;"> 런쳐 다운로드 받기 <i class="fa fa-arrow-circle-right"></i></a>'+
                '</div>'
                );
            $('#overlay').hide();
        }


        function handleError(xhr, status, error, msg){
            //ajax 사용
            updateDUTstatusFalse();
            //view 처리
            connectFailAlert(msg);
            setFailView();
        }

        function updateDUTstatusFalse(){
            var param = {
                ip : sensorData.ip,
                port: sensorData.port
            }
            $.ajax({
                url: '/api/dashboards/dashboard/update_dut_status_false',
                method: 'get',
                data : param,
                timeout: 5000,
                dataType: 'json',
                success: function (json) {
                },
                error: function (request, status, error) {
                }
            });
        }

        function connectFailAlert(desc) {
            if (typeof swal != 'undefined') {
                swal("센서연결 실패", desc, "error");
            } else {
                alert(msg);
            }
            msg = null;
        }

        function setFailView() {
            $("a[name=aToDownload]").attr('hidden', false);
            $btnSensorConnect.prop('disabled', false);
            $btnSensorConnect.removeClass('btn-success');
            $btnSensorConnect.removeClass('btn-default');
            $btnSensorConnect.addClass('btn-danger');

            $("a[name=aToDownload]").attr('hidden', true);

            $('#header_connect_status').removeClass('label-success');
            $('#header_connect_status').removeClass('label-default');
            $('#header_connect_status').addClass('label-danger');
            $('#header_connect_status').html('color', '#dd4b39').html('<i class="fa fa-none">연결안됨</i>');
            $('#divSensorConnectResult').html('검증센서 연결이 필요합니다.');

            formDisable(false);
            $('#overlay').hide();
        }

        function ivsDUTunset(){
            $.ajax({
                url: '/api/dashboards/dashboard/ivs_dut_unset',
                method: 'get',
                timeout: 5000,
                dataType: 'json',
                success: function (json) {
                },
                error: function (request, status, error) {
                }
            });
        }

        function formDisable(flag) {
            $('.input-dut-info').prop('disabled', flag);
            $('button[name=btnSensorConnect]').prop('disabled', flag);
            $('button[value=btnDUTList]').prop('disabled', flag);
            if (flag) {
                $('#overlay').show();
            } else {
                $('#overlay').hide();
            }
        }

        function callModal(obj) {
            if (obj.getAttribute('value') == 'detect') {
                // if ('<%=session.isTesting%>' == 'true') { //Test 실행중일 때
                //   var data = ''; //test data 받아서 넣어야함...
                //   setSelect(1);
                //   loadPageData(1);
                //   $('#modal_detect').modal();
                // } else {
                $('#modal_dash_detect').modal();
                // }
            } else if (obj.getAttribute('value') == 'load') {
                $('#modal_dash_load').modal();
            } else if (obj.getAttribute('value') == 'pcap') {
                $('#modal_dash_pcap').modal();
            } else if (obj.getAttribute('value') == 'btnDUTList') {
                $('#modal_dut_list').modal();
            }
        }

        function GetRemoteAuditLog() {
            var param = {
                limit: 10,
            };
            $.ajax({
                url: '/api/settings/audit',
                method: 'get',
                data: param,
                dataType: 'json',
                success: function (json) {
                    if (json.length > 0) {
                        var data = json[0].datas;
                        KTimeline(data);
                    }else{
                        var data = [{
                            status_code: 0,
                            category: '최근 작업 없음',
                            id: 'none',
                            action : '최근 조회된 작업이 없습니다.',
                        }];
                        KTimeline(data);
                    }$btnSensorConnect
                },
                error: function (request, status, error) {
                    var data = [{
                            status_code: 0,
                            category: '최근 작업 없음',
                            id: 'none',
                            action : '최근 조회된 작업이 없습니다.',
                        }];
                        KTimeline(data);
                },
            });
        }

        function KTimeline(data) {
            // bg_seagreen bg-red
            var listFormat =
                "<li><i class='{{status_code}}' ></i><div class='timeline-item'><span class='time'><i class='fa fa-clock-o'></i> {{ctime}}</span><h3 class='timeline-header'><a>{{category}}</a></h3><div class='timeline-body'>{{action}}</div></div></li>";

            var appendHTML = "";
            if (data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    var tmp = listFormat;

                    var id = "<span class='label label-default'>" + data[i].id + "</span>";
                    var status_code;
                    switch ( parseInt(data[i].status_code) ) {
                        case 0: //fail
                            status_code = "fa fa-times bg-red";
                            break;
                        case 1: //default-success
                            status_code = "fa fa-check bg_seagreen";
                            break;
                        case 2: //login-success
                            status_code = "fa fa-user bg-blue";
                            break;
                        case 3: //Test-success
                            status_code = "fa fa-check-square-o bg-green";
                            break;
                    }

                    var ctime = fTimeline(data[i].ctime);
                    var category = data[i].category;
                    var action = data[i].action;

                    tmp = tmp.replace(/{{status_code}}/gi, status_code);
                    tmp = tmp.replace(/{{ctime}}/gi, ctime);
                    tmp = tmp.replace(/{{category}}/gi, category);
                    tmp = tmp.replace(/{{action}}/gi, id + " " + action);

                    appendHTML += tmp;

                    tmp = null;
                    status_code = null;
                    ctime = null;
                    category = null;
                    action = null;
                }
            } else {
                appendHTML = "조회된 데이터가 없습니다.";
            }
            $('.k-timeline').empty().append(appendHTML);
        }

        function byteConvertor(bytes) {
            bytes = parseInt(bytes);
            var e = Math.floor(Math.log(bytes) / Math.log(1024));
            if (e == "-Infinity") return "0 GB";
            else return (bytes / Math.pow(1024, Math.floor(e))).toFixed(2) + " GB";
        }

    </script>
</body>

</html>
