<!DOCTYPE html>
<html>

<head>
    <%- include('../partials/head') -%>
</head>

<body class="hold-transition skin-wins sidebar-mini fixed">
    <div class="wrapper">

        <%- include('../partials/main-header') -%>
        <%- include('../partials/main-sidebar') -%>

        <!-- Content Wrapper. Contains page content -->
        <div class="content-wrapper bg_w">
            <!-- Content Header (Page header) -->
            <section class="content-header content_border animated fadeInLeft">
                    <h4>
                      정책 검증 센서 설정
                      <%# <small>Control panel</small> %>
                    </h4>
                    <ol class="breadcrumb">
                      <li><a href="/"><i class="fa fa-home"></i> 홈</a></li>
                      <li class="active">관리</li>
                      <li class="active">정책 검증 센서 설정</li>
                    </ol>
            </section>

            <!-- Main content -->
            <section class="content">
                <div class="row ">
                    <!-- Left col -->
                    <section class="col-lg-12 connectedSortable">
                        <!-- box (검증 센서 리스트) -->
                        <div class="box" style="border:none";>
                            <!-- /.box-header -->
                            <div class="box-body">

                                <div class="form-group">
                                    <button type="button" class="btn btn-default btn-sm" id="btnDutRefresh" title="새로고침" data-toggle="tooltip" data-container="body"><i class="fa fa-refresh"></i></button>
                                    <button type="button" class="btn btn-default btn-sm" id="btnDutAdd" title="추가" data-toggle="tooltip" data-container="body"><i class="fa fa-plus"></i></button>
                                </div>
                                <!-- /.btn-group -->

                                <table class="table table_1 table-hover table-striped" id="tblDutList" data-width="100%" data-toggle="table" data-striped="true"
                                    data-pagination="true" data-page-size="50" data-page-list="[10, 20, 30, 50]" data-locale="ko-KR"
                                    data-show-columns="false" data-search="false" data-show-refresh="false" data-show-toggle="false"
                                    data-show-export="false" data-smart-display="false">
                                    <thead>
                                        <tr class="clickable">
                                            <th data-field="status" data-align="center" data-halign="center" 
                                            data-formatter="fSensorStatus" data-visible="true">상태</th>
                                            <th data-field="ip" data-align="center">IP</th>
                                            <th data-field="port" data-align="center">Port</th>
                                            <th data-field="console_id" data-align="center">ID</th>
                                            <th data-field="console_passwd" data-align="center" data-visible="false">Password</th>
                                            <th data-field="device_id" data-align="center">SSH ID</th>
                                            <th data-field="device_port" data-align="center" data-halign="center">SSH Port</th>
                                            <th data-field="device_passwd" data-align="center" data-halign="center" data-visible="false">SSH Password</th>
                                            <th data-align="center" data-halign="center" data-formatter="fSensorEdit">상세보기</th>
                                            <th data-align="center" data-halign="center" data-formatter="fSensorDelete">삭제</th>
                                            <th data-field="latest" data-align="left" data-halign="center" data-visible="false">latest</th>
                                            <th data-field="connect"  data-align="center" data-halign="center" data-formatter="fSensorConnect">연결</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                            <!-- /.box-body -->
                            <div class="overlay" id="overlay">
                                <i class="fa fa-spinner fa-spin"></i>
                            </div>
                        </div>
                        <!-- /.box(검증 센서 리스트) -->
                    </section>
                    <!-- /.Left col -->
                </div>
                <!-- ./row -->
            </section>
            <!-- ./Main content -->
        </div>
        <!-- /.content-wrapper -->
    </div>
    <!-- ./wrapper -->

    <%- include('../partials/modal-dut-add') -%>    
    <%- include('../partials/foot') -%>

    <script>
        // 변수 선언
        // var sensorData = {
        //     ip: '',
        //     port: '',
        // }

        var connectSensor = {
            ip: '',
            port: '',
            console_id: '',
            console_passwd: '',
            device_id: '',
            device_port: '',
            device_passwd: '',
        }

        var $btnDutAdd = $('#btnDutAdd');
        var $btnDutRefresh = $('#btnDutRefresh');
        var $modal_dut_add = $('#modal_dut_add');

        $(function () {
            getDUTList();


            // 추가 버튼을 클릭한다.
            $btnDutAdd.click(showDutAdd);                  
            // 새로고침 버튼을 클릭한다.
            $btnDutRefresh.click(getDUTRefresh);
            $modal_dut_add.find('form').submit(SubmitInsertDut);                            
        });


        $(function () {
            $('#tblDutList').bootstrapTable().on('click-row.bs.table', function (e, row,
                $element) {
                $('.success').removeClass('success');
                $($element).addClass('success');
            });
        });



        function connectBtnClick(row){
            var param = JSON.parse(decodeURIComponent(row));
            connectSensor.ip = param.ip;
            connectSensor.port = param.port;
            connectSensor.console_id = param.console_id;
            connectSensor.console_passwd = param.console_passwd;
            connectSensor.device_id = param.device_id;
            connectSensor.device_port = param.device_port;
            connectSensor.device_passwd = param.device_passwd;
            
            if (param.status == 1) {
                swal({
                    title: "연결을 해제하시겠습니까?",
                    text: connectSensor.ip + " 센서와의 연결을 해제합니다.",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes"
                }).then(function () {
                    updateDUTstatusFalse(); 
                    ivsDUTunset();                     
                    setViewByState(false);

                    $('#header_connect_status').removeClass('label-success');
                    $('#header_connect_status').removeClass('label-default');
                    $('#header_connect_status').addClass('label-danger');
                    $('#header_connect_status').html('color', '#dd4b39').html('<i class="fa fa-none">연결안됨</i>');
                });
            } else {
                $('#overlay').show();
                $('#header_connect_status').removeClass('label-success');
                $('#header_connect_status').removeClass('label-danger');
                $('#header_connect_status').addClass('label-default');
                $('#header_connect_status').html('<i class="fa fa-none">연결중</i>');              
                ivsDUTunsetBeforeReconnect();        
            }           
        }

        function getDUTList() {
            $.ajax({
                url: '/api/dashboards/dashboard/get_dut_list',
                method: 'get',
                dataType: 'json',
                beforeSend: function (xhr) {
                    $('#tblDutList').bootstrapTable("showLoading");
                },
                success: function (json) {
                    if(json.length > 0){    

                        var result = json[0].datas;
                        $('#tblDutList').bootstrapTable("load", result);

                            //최근 IVS setting
                        for (var i = 0; i < result.length; i++) {
                            if (result[i].latest == 1) {
                                connectSensor.ip = result[i].ip;
                                connectSensor.port = result[i].port;
                                connectSensor.console_id = result[i].console_id;
                                connectSensor.console_passwd = result[i].console_passwd;
                                connectSensor.device_id = result[i].device_id;
                                connectSensor.device_port = result[i].device_port;
                                connectSensor.device_passwd = result[i].device_passwd;
                                break;
                            }              
                            if ('<%=session.isConnected%>' == 'true') {
                                updateDUTlatest();
                                connectWithSensor();
                            } 
                        }           
                    }
                    $('#overlay').hide();                        
                    $('#tblDutList').bootstrapTable("hideLoading");    
                },
                error: function (request, status, error) {
                }
            });
        }

        //****************************** Connect Start ******************************//
        //*********
        //********* 0) update DUT latest
        function updateDUTlatest() {
            var data = {
                ip: connectSensor.ip,
            };
            $.ajax({
                url: '/api/dashboards/dashboard/update_dut_latest',
                method: 'get',
                data: data,
                timeout: 5000,
                dataType: 'json',
                success: function (json) {                    
                },
                error: function (request, status, error) {
                    handleError(null,null,null,'\n최근 연결 센서리스트를 가져오는데 에러가 발생했습니다.');      
                }
            });
        }
        //*********
        //********* 3) 센서와 연결 : 센서버전-라이센스-setting DUT
        
        function connectWithSensor(){
            var data = {
                ip: connectSensor.ip,
                port: connectSensor.port,
                console_id: connectSensor.console_id,
                console_passwd: connectSensor.console_passwd,
                device_id: connectSensor.device_id,
                device_port: connectSensor.device_port,
                device_passwd: connectSensor.device_passwd,
            }
            
            $.ajax({
                url: '/api/dashboards/dashboard/connect_with_sensor',
                method: 'get',
                data: data,
                timeout: 5000,
                dataType: 'json',
                success: function (json) { 
                    if( json == null){      
                        handleError(null,null,null,'센서와 연결 중 에러가 발생했습니다.');         
                    }else{ 
                        if(json.dut_setting_result.includes('SUCCESS')){     
                            setViewByState(true);
                        }else{
                            handleError(null,null,null,'센서와 연결 중 에러가 발생했습니다.');   
                        }  
                    }   
                },
                error: function (request, status, error) {
                    handleError(request,status,error,'센서와 연결 중 에러가 발생했습니다.');                    
                }
            });
        }
        function handleError(xhr, status, error, msg){
            updateDUTstatusFalse();
            ivsDUTunset();   
            connectFailAlert(msg);
            setViewByState(false);
        }

        //*********
        //****************************** Connect End ******************************//


        function getDUTRefresh() {
            $.ajax({
                url: '/api/dashboards/dashboard/get_dut_list',
                method: 'get',
                dataType: 'json',
                beforeSend: function (xhr) {
                    $('#tblDutList').bootstrapTable("showLoading");
                },
                success: function (json) {
                    var result = json[0].datas;
                    $('#tblDutList').bootstrapTable("load", result);
                    $('#tblDutList').bootstrapTable("hideLoading");
                },
                error: function (request, status, error) {
                }
            });
        }

        function ivsDUTunset(){                         
            $.ajax({
                url: '/api/dashboards/dashboard/ivs_dut_unset',
                method: 'get',
                timeout: 5000,
                dataType: 'json',
                success: function (json) {
                },
                error: function (request, status, error) {
                }
            });
        }
        function ivsDUTunsetBeforeReconnect(){                         
            $.ajax({
                url: '/api/dashboards/dashboard/ivs_dut_unset',
                method: 'get',
                timeout: 5000,
                dataType: 'json',
                success: function (json) {
                    updateDUTlatest();  
                    connectWithSensor();
                },
                error: function (request, status, error) {
                }
            });
        }

        function updateDUTstatusFalse(){     
            var param = {
                ip : connectSensor.ip,
                port: connectSensor.port
            }                          
            $.ajax({
                url: '/api/dashboards/dashboard/update_dut_status_false',
                method: 'get',
                data : param,
                timeout: 5000,
                dataType: 'json',
                success: function (json) {
                },
                error: function (request, status, error) {
                }
            });
        }    

        function connectFailAlert(desc) {
            if (typeof swal !== 'undefined') {
                swal("센서연결 실패", desc, "error");
            } else {
                alert(msg);
            }
            msg = null;
        }

        //성공 실패에 따른 view setting
        function setViewByState(flag) {
            getDUTRefresh();
            if (flag) {             
                $('#header_connect_status').removeClass('label-default');
                $('#header_connect_status').removeClass('label-danger');
                $('#header_connect_status').addClass('label-success');
                $('#header_connect_status').html('<i class="fa fa-none">연결성공</i>');
            } else {
                $('#header_connect_status').removeClass('label-success');
                $('#header_connect_status').removeClass('label-default');
                $('#header_connect_status').addClass('label-danger');
                $('#header_connect_status').html('color', '#dd4b39').html('<i class="fa fa-none">연결안됨</i>');
            }
            $('#overlay').hide();
        }

        // 추가 버튼을 클릭한다.
        function showDutAdd() {

            // data map - init
            $modal_dut_add.find('#input_ip').val('');
            $modal_dut_add.find('#input_port').val('');
            $modal_dut_add.find('#input_console_id').val('');
            $modal_dut_add.find('#input_console_passwd').val('')
            $modal_dut_add.find('#input_device_id').val('')
            $modal_dut_add.find('#input_device_passwd').val('')
            $modal_dut_add.find('#input_device_port').val('');

            // show modal
            $modal_dut_add.modal();
        }

        // 테이블 상세보기 버튼을 클릭한다.
        function ShowDutInfo(row) {
            var param = JSON.parse(decodeURIComponent(row));

            // data map - init
            $modal_dut_add.find('#input_ip').val(param.ip);
            $modal_dut_add.find('#input_port').val(param.port);

            $modal_dut_add.find('#input_console_id').val(param.console_id);
            $modal_dut_add.find('#input_console_passwd').val(param.console_passwd);
            $modal_dut_add.find('#input_device_id').val(param.device_id);
            $modal_dut_add.find('#input_device_port').val(param.device_port);
            $modal_dut_add.find('#input_device_passwd').val(param.device_passwd);

            // show modal
            $modal_dut_add.modal();
        }


        function SubmitInsertDut(){
            var ip = $modal_dut_add.find('#input_ip').val();
            var port = $modal_dut_add.find('#input_port').val();
            var console_id = $modal_dut_add.find('#input_console_id').val();
            var console_passwd = $modal_dut_add.find('#input_console_passwd').val();
            var device_id = $modal_dut_add.find('#input_device_id').val();
            var device_passwd = $modal_dut_add.find('#input_device_passwd').val();
            var device_port = $modal_dut_add.find('#input_device_port').val();

            var param = {
                ip: ip,
                port: port,
                console_id: console_id,
                console_passwd: console_passwd,
                device_id: device_id,
                device_passwd: device_passwd,
                device_port: device_port
            };

            $.ajax({
                url: '/api/dashboards/dashboard/insert_dut',
                method: 'get',
                data: param,
                dataType: 'json',
                success: function (result) {                
                    if (result.message == "SUCCESS_  2000") {                        
                        getDUTRefresh();
                        $modal_dut_add.find('.close').trigger('click');
                    } else {                        
                        swal("Error", "검증 센서 추가에 실패하였습니다.", "error");
                    }
                },
                error: function (request, status, error) {
                    swal("Error", "검증 센서 추가에 실패하였습니다.", "error");
                }
                
            });
        }        

        // 검증 센서를 삭제한다.
        function SensorDelete(ip) {
            var param = {
                ip: ip
            };
            var url;

            swal({
                title: '검증 센서 삭제',
                text: '센서(' + ip + ')를 삭제합니다.',
                type: 'question',
                confirmButtonClass: "btn-danger",
                confirmButtonText: "삭제",
                showCancelButton: true,
                cancelButtonText: '취소'
            }).then(function () {
                $.ajax({
                    url: '/api/dashboards/dashboard/delete_dut',
                    method: 'get',
                    dataType: 'json',
                    data: param,
                    success: function (result) {
                        getDUTRefresh();
                        // window.location.href= "/dashbards/dashboard/";
                    },
                    error: function (request, status, error) {
                        var msg = "code:" + request.status + "\n" + "error:" +
                            error + "\n" +
                            request.responseText;
                        if (typeof swal !== 'undefined') {
                            swal("Error", msg, "error");
                        } else {
                            alert(msg);
                        }
                        msg = null;
                    }
                });
            }, function (dismiss) {
                if (dismiss === 'cancel') {}
            });
        }
    </script>
</body>

</html>